<#
.SYNOPSIS
    Sample control for UniversalDashboard.
.DESCRIPTION
    Sample control function for UniversalDashboard. This function must have an ID and return a hash table.
.PARAMETER Id
    An id for the component default value will be generated by new-guid.
.EXAMPLE
    PS C:\> <example usage>
    Explanation of what the example does
.INPUTS
    Inputs (if any)
.OUTPUTS
    Output (if any)
.NOTES
    General notes
#>
function New-UDTagCloud {
    param(
        [Parameter()]
        [string]$Id = (New-Guid).ToString(),
        [Parameter()]
        [string]$height = "200px",
        [Parameter()]
        [int]$padding = 5,
        [Parameter()]
        [string]$fontFamily = "sans-serif",
        [Parameter()]
        [int]$rotate = 30,
        [Parameter()]
        [array]$colorarray = @(
            '#ec91d8',
            '#ec91d8',
            '#ffbeef',
            '#ffd3da',
            '#e9d3d0',
            '#a9ddd6',
            '#a9ddd6',
            '#7a8b99',
            '#91adc2',
            '#9ba0bc'
        ),
        # [Parameter()]
        # [scriptblock]$data,
        [Parameter()]
        [int]$fontSize
    )

    End {

        @{
            # The AssetID of the main JS File
            assetId    = $AssetId
            # Tell UD this is a plugin
            isPlugin   = $true
            # This ID must be the same as the one used in the JavaScript to register the control with UD
            type       = "UD-TagCloud"
            # An ID is mandatory
            id         = $Id

            # This is where you can put any other properties. They are passed to the React control's props
            # The keys are case-sensitive in JS.
            height     = $height
            padding    = $padding
            fontFamily = $fontFamily
            rotate     = $rotate
            colorarray = $colorarray
            # data       = [array]$data.invoke()
            fontSize   = $fontSize
        }

    }
}
